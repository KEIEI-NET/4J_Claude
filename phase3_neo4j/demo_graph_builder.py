"""
Graph Builder Demo Script

GraphBuilder„Å®Neo4jClient„ÅÆ‰ΩøÁî®‰æã„ÇíÁ§∫„Åó„Åæ„Åô„ÄÇ
"""

import sys
import io

# Windows console encoding fix
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

from src.graph_analyzer.graph.graph_builder import GraphBuilder
from src.graph_analyzer.models.schema import NodeType, RelationType


def main():
    """„Éá„É¢„É°„Ç§„É≥Èñ¢Êï∞"""
    print("=" * 60)
    print("Phase 3 Graph Builder Demo")
    print("=" * 60)

    # „Çµ„É≥„Éó„É´ÂàÜÊûêÁµêÊûúÔºàPhase 1„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºâ
    sample_analysis_result = {
        "analyzed_files": [
            "/src/main/java/com/example/dao/UserDAO.java",
            "/src/main/java/com/example/dao/OrderDAO.java",
        ],
        "total_issues": 3,
        "issues_by_severity": {"high": 2, "medium": 1},
        "issues": [
            {
                "detector": "AllowFilteringDetector",
                "type": "ALLOW_FILTERING",
                "severity": "high",
                "file": "/src/main/java/com/example/dao/UserDAO.java",
                "line": 42,
                "message": "ALLOW FILTERING detected in query",
                "cql": "SELECT * FROM users WHERE email = ? ALLOW FILTERING",
                "recommendation": "Add email to the partition key or use a secondary index",
                "evidence": ["ALLOW FILTERING clause found"],
                "confidence": 1.0,
            },
            {
                "detector": "PartitionKeyDetector",
                "type": "NO_PARTITION_KEY",
                "severity": "high",
                "file": "/src/main/java/com/example/dao/UserDAO.java",
                "line": 55,
                "message": "Query missing partition key",
                "cql": "SELECT * FROM users WHERE status = ?",
                "recommendation": "Include user_id in WHERE clause",
                "evidence": ["No partition key in WHERE clause"],
                "confidence": 0.9,
            },
            {
                "detector": "BatchSizeDetector",
                "type": "LARGE_BATCH",
                "severity": "medium",
                "file": "/src/main/java/com/example/dao/OrderDAO.java",
                "line": 78,
                "message": "Batch operation with 150 statements",
                "cql": "BEGIN BATCH ... END BATCH",
                "recommendation": "Reduce batch size to < 100 statements",
                "evidence": ["150 statements in batch"],
                "confidence": 1.0,
            },
        ],
        "analysis_time": 2.5,
        "timestamp": "2025-01-27T10:00:00",
    }

    # GraphBuilder„ÇíÂàùÊúüÂåñ
    print("\nüìä GraphBuilderÂàùÊúüÂåñ‰∏≠...")
    builder = GraphBuilder()

    # ÂàÜÊûêÁµêÊûú„Åã„Çâ„Ç∞„É©„Éï„ÇíÊßãÁØâ
    print("üî® ÂàÜÊûêÁµêÊûú„Åã„Çâ„Ç∞„É©„Éï„ÇíÊßãÁØâ‰∏≠...")
    nodes, relationships = builder.build_from_analysis_result(sample_analysis_result)

    # ÁµêÊûú„ÇíË°®Á§∫
    print(f"\n‚úÖ „Ç∞„É©„ÉïÊßãÁØâÂÆå‰∫Ü!")
    print(f"   „Éé„Éº„ÉâÊï∞: {len(nodes)}")
    print(f"   „É™„É¨„Éº„Ç∑„Éß„É≥„Ç∑„ÉÉ„ÉóÊï∞: {len(relationships)}")

    # „Éé„Éº„Éâ„Çø„Ç§„ÉóÂà•„ÅÆÈõÜË®à
    print("\nüìà „Éé„Éº„Éâ„Çø„Ç§„ÉóÂà•ÈõÜË®à:")
    node_type_counts = {}
    for node in nodes:
        node_type_counts[node.node_type] = node_type_counts.get(node.node_type, 0) + 1

    for node_type, count in sorted(node_type_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"   {node_type.value:15s}: {count:3d} ÂÄã")

    # „É™„É¨„Éº„Ç∑„Éß„É≥„Ç∑„ÉÉ„Éó„Çø„Ç§„ÉóÂà•„ÅÆÈõÜË®à
    print("\nüîó „É™„É¨„Éº„Ç∑„Éß„É≥„Ç∑„ÉÉ„Éó„Çø„Ç§„ÉóÂà•ÈõÜË®à:")
    rel_type_counts = {}
    for rel in relationships:
        rel_type_counts[rel.relation_type] = rel_type_counts.get(rel.relation_type, 0) + 1

    for rel_type, count in sorted(rel_type_counts.items(), key=lambda x: x[1], reverse=True):
        print(f"   {rel_type.value:15s}: {count:3d} ÂÄã")

    # ÂÖ∑‰ΩìÁöÑ„Å™„Éé„Éº„Éâ‰æã„ÇíË°®Á§∫
    print("\nüìù „Éé„Éº„Éâ‰æã:")

    # „Éï„Ç°„Ç§„É´„Éé„Éº„Éâ
    file_nodes = [n for n in nodes if n.node_type == NodeType.FILE]
    if file_nodes:
        print(f"\n   FileNode: {file_nodes[0].properties.get('path')}")

    # „ÇØ„É©„Çπ„Éé„Éº„Éâ
    class_nodes = [n for n in nodes if n.node_type == NodeType.CLASS]
    if class_nodes:
        print(f"   ClassNode: {class_nodes[0].properties.get('name')}")

    # „ÇØ„Ç®„É™„Éé„Éº„Éâ
    query_nodes = [n for n in nodes if n.node_type == NodeType.QUERY]
    if query_nodes:
        cql = query_nodes[0].properties.get('cql', '')
        print(f"   CQLQueryNode: {cql[:60]}...")

    # „ÉÜ„Éº„Éñ„É´„Éé„Éº„Éâ
    table_nodes = [n for n in nodes if n.node_type == NodeType.TABLE]
    if table_nodes:
        tables = [n.properties.get('name') for n in table_nodes]
        print(f"   TableNodes: {', '.join(tables)}")

    # ÂïèÈ°å„Éé„Éº„Éâ
    issue_nodes = [n for n in nodes if n.node_type == NodeType.ISSUE]
    if issue_nodes:
        issue = issue_nodes[0]
        print(
            f"   IssueNode: {issue.properties.get('issue_type')} "
            f"({issue.properties.get('severity')})"
        )

    # „Ç∞„É©„ÉïÈöéÂ±§„ÅÆ‰æã
    print("\nüå≤ „Ç∞„É©„ÉïÈöéÂ±§„ÅÆ‰æã:")
    print("   File ‚Üí Class ‚Üí Method ‚Üí CQLQuery ‚Üí Table")
    print("                              ‚Üì")
    print("                           Issue")

    # Neo4j„Å∏„ÅÆ„Ç§„É≥„Éù„Éº„ÉàÊ∫ñÂÇô„Åå„Åß„Åç„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ§∫„Åô
    print("\nüíæ Neo4j„Å∏„ÅÆ„Ç§„É≥„Éù„Éº„ÉàÊ∫ñÂÇô:")
    print(f"   client.batch_create_nodes(nodes)  # {len(nodes)}ÂÄã„ÅÆ„Éé„Éº„Éâ„Çí‰ΩúÊàê")
    print(
        f"   client.batch_create_relationships(relationships)  # {len(relationships)}ÂÄã„ÅÆ„É™„É¨„Éº„Ç∑„Éß„É≥„Ç∑„ÉÉ„Éó„Çí‰ΩúÊàê"
    )

    print("\n" + "=" * 60)
    print("‚úÖ „Éá„É¢ÂÆå‰∫Ü")
    print("=" * 60)


if __name__ == "__main__":
    main()
