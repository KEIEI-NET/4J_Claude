# Phase 4 CI/CD Pipeline - Continuous Integration
# Trigger: Push to main, Pull requests

name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'phase4_visualization/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'phase4_visualization/**'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  NEO4J_VERSION: '5.15'

jobs:
  # === Backend Tests ===
  backend-tests:
    name: Backend - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    services:
      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/testpassword
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "wget -q --spider http://localhost:7474 || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 40s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: phase4_visualization
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run ruff linter
        working-directory: phase4_visualization
        run: ruff check backend/

      - name: Run mypy type checker
        working-directory: phase4_visualization
        run: mypy backend/

      - name: Run pytest with coverage
        working-directory: phase4_visualization
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: testpassword
        run: |
          pytest backend/tests/ -v --cov=backend --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./phase4_visualization/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ matrix.python-version }}
          path: phase4_visualization/htmlcov/

  # === Frontend Tests ===
  frontend-tests:
    name: Frontend - Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: phase4_visualization/frontend/package-lock.json

      - name: Install dependencies
        working-directory: phase4_visualization/frontend
        run: npm ci

      - name: Run ESLint
        working-directory: phase4_visualization/frontend
        run: npm run lint

      - name: Run TypeScript type check
        working-directory: phase4_visualization/frontend
        run: npx tsc --noEmit

      - name: Run Vitest unit tests
        working-directory: phase4_visualization/frontend
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./phase4_visualization/frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

      - name: Build production bundle
        working-directory: phase4_visualization/frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: phase4_visualization/frontend/dist/

  # === E2E Tests ===
  e2e-tests:
    name: E2E Tests - Playwright
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/testpassword
        ports:
          - 7687:7687
          - 7474:7474

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: phase4_visualization/frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        working-directory: phase4_visualization
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Start backend server
        working-directory: phase4_visualization
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: testpassword
        run: |
          python -m uvicorn backend.api.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Install frontend dependencies
        working-directory: phase4_visualization/frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: phase4_visualization/frontend
        run: npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: phase4_visualization/frontend
        run: npm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: phase4_visualization/frontend/playwright-report/
          retention-days: 30

  # === Docker Build ===
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./phase4_visualization
          file: ./phase4_visualization/backend/Dockerfile
          push: false
          tags: phase4-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./phase4_visualization/frontend
          file: ./phase4_visualization/frontend/Dockerfile
          push: false
          tags: phase4-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test docker-compose
        working-directory: phase4_visualization
        run: |
          docker-compose config
          docker-compose up -d
          sleep 30
          docker-compose ps
          docker-compose down -v

  # === Security Scan ===
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './phase4_visualization'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
