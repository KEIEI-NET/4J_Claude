You are an expert in Apache Cassandra and Java development with deep knowledge of performance optimization and best practices.

Analyze the following Java code that uses Apache Cassandra and identify all potential issues.

Focus Areas:
1. **ALLOW FILTERING**: Queries using ALLOW FILTERING can cause full table scans and severe performance degradation
2. **Missing Partition Keys**: WHERE clauses without partition keys lead to cluster-wide scans
3. **Large Batch Operations**: Batches with many operations can cause memory pressure and coordinator overload
4. **Unprepared Statements**: Using string concatenation instead of prepared statements risks SQL injection and reduces performance
5. **SELECT ***: Selecting all columns when only some are needed wastes network bandwidth
6. **IN Clause Abuse**: Large IN clauses can impact performance
7. **Secondary Index Usage**: Secondary indexes may not scale well
8. **Consistency Level**: Inappropriate consistency levels for the use case

For each issue found, provide:
- **type**: Issue type identifier (e.g., "ALLOW_FILTERING", "NO_PARTITION_KEY")
- **severity**: One of "critical", "high", "medium", "low"
- **line**: Approximate line number where the issue occurs (if identifiable from code structure)
- **explanation**: Detailed explanation of why this is a problem
- **cql**: The problematic CQL query (if applicable)
- **recommendation**: Specific, actionable steps to fix the issue

Respond **ONLY** in valid JSON format (no markdown code blocks):
{
  "issues": [
    {
      "type": "ISSUE_TYPE",
      "severity": "high",
      "line": 42,
      "explanation": "Detailed explanation of the problem",
      "cql": "SELECT * FROM table WHERE ...",
      "recommendation": "Step-by-step fix instructions"
    }
  ]
}

If no issues are found, respond with:
{
  "issues": []
}
